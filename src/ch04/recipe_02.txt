# Python Cookbook, 3rd Ed.
#
# Chapter: Built-In Data Structures Part 1: Lists and Sets
# Recipe: Building lists -- literals, appending, and comprehensions


# Subsection: Getting ready

>>> from pathlib import Path
>>> home = Path.cwd() / "data"
>>> for path in sorted(home.glob('*.csv')):
...     print(path.stat().st_size, path.name)
260 binned.csv
250 ch14_r03.csv
2060 ch14_r04.csv
45 craps.csv
225 fuel.csv
156 fuel2.csv
28 output.csv
19760 output_0.csv
19860 output_1.csv
19645 output_2.csv
19971 output_3.csv
19588 output_4.csv
...

# Subsection: How to do it...
# Topic: Building a list with the append() method

>>> file_sizes = []

>>> home = Path.cwd() / "data"
>>> for path in sorted(home.glob('*.csv')):
...     file_sizes.append(path.stat().st_size)

>>> print(file_sizes)
[260, 250, 2060, 45, 225, 156, 28, 19760, 19860, 19645, 19971, 19588, 19999, 20000, 20035, 19739, 19941, 215, 412, 28, 166, 0, 1810, 0, 0, 16437, 20295]
>>> print(sum(file_sizes))
240925

a = ['some', 'data']
a = a.append('more data')
a.append('more data')


# Subsection: How to do it...
# Topic: Writing a list comprehension


[... for path in home.glob('*.csv')]

[path.stat().st_size
  for path in home.glob('*.csv')]

>>> [path.stat().st_size
...     for path in sorted(home.glob('*.csv'))]
[260, 250, 2060, 45, 225, 156, 28, 19760, 19860, 19645, 19971, 19588, 19999, 20000, 20035, 19739, 19941, 215, 412, 28, 166, 0, 1810, 0, 0, 16437, 20295]


# Subsection: How to do it...
# Topic: Using the list function on a generator expression

list(
    path.stat().st_size
    for path in home.glob('*.csv')
)

>>> list(path.stat().st_size
...     for path in sorted(home.glob('*.csv')))
[260, 250, 2060, 45, 225, 156, 28, 19760, 19860, 19645, 19971, 19588, 19999, 20000, 20035, 19739, 19941, 215, 412, 28, 166, 0, 1810, 0, 0, 16437, 20295]


# Subsection: How it works...

>>> sieve = [True for i in range(100)]

>>> sieve[0] = sieve[1] = False
>>> for p in range(100):
...     if sieve[p]:
...         for n in range(p*2, 100, p):
...             sieve[n] = False
>>> prime = [p for p in range(100) if sieve[p]]

>>> prime
[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]


# Subsection: There's more...

>>> sizes = list(path.stat().st_size
...     for path in home.glob('*.csv'))
>>> sum(sizes)
240925
>>> max(sizes)
20295
>>> min(sizes)
0
>>> from statistics import mean
>>> round(mean(sizes), 3)
8923.148

>>> sizes.index(min(sizes))
1

# Subsection: There's more...
# Topic: Other ways to extend a list

>>> home = Path.cwd() / "src"
>>> ch3 = list(path.stat().st_size
...     for path in home.glob('ch03/*.py'))
>>> ch4 = list(path.stat().st_size
...     for path in home.glob('ch04/*.py'))

>>> len(ch3)
16
>>> len(ch4)
6
>>> final = ch3 + ch4
>>> len(final)
22
>>> sum(final)
34853


>>> final_ex = []

>>> final_ex.extend(ch3)
>>> final_ex.extend(ch4)
>>> len(final_ex)
22
>>> sum(final_ex)
34853


>>> p = [3, 5, 11, 13]
>>> p.insert(0, 2)
>>> p
[2, 3, 5, 11, 13]

>>> p.insert(3, 7)
>>> p
[2, 3, 5, 7, 11, 13]


# End of Building lists -- literals, appending, and comprehensions
