# Python Cookbook, 3rd Ed.
#
# Chapter: Built-In Data Structures Part 1: Lists and Sets
# Recipe: Building sets -- literals, adding, comprehensions, and operators



>>> a = "string"
>>> hash(a)
... # doctest: +SKIP
4964286962312962439

>>> b = ["list", "of", "strings"]
>>> hash(b)
Traceback (most recent call last):
...
TypeError: unhashable type: 'list'


# Subsection: Getting ready

>>> import_details = [
... ('Chapter_12.ch12_r01', ['typing', 'pathlib']),
... ('Chapter_12.ch12_r02', ['typing', 'pathlib']),
... ('Chapter_12.ch12_r03', ['typing', 'pathlib']),
... ('Chapter_12.ch12_r04', ['typing', 'pathlib']),
... ('Chapter_12.ch12_r05', ['typing', 'pathlib']),
... ('Chapter_12.ch12_r06', ['typing', 'textwrap', 'pathlib']),
... ('Chapter_12.ch12_r07', ['typing', 'Chapter_12.ch12_r06', 'Chapter_12.ch12_r05', 'concurrent']),
... ('Chapter_12.ch12_r08', ['typing', 'argparse', 'pathlib']),
... ('Chapter_12.ch12_r09', ['typing', 'pathlib']),
... ('Chapter_12.ch12_r10', ['typing', 'pathlib']),
... ('Chapter_12.ch12_r11', ['typing', 'pathlib']),
... ('Chapter_12.ch12_r12', ['typing', 'argparse'])
... ]

# Subsection: How to do it...
# Topic: Building a set with the add method

>>> all_imports = set()

>>> for item, import_list in import_details:
...     for name in import_list:
...         all_imports.add(name)
>>> all_imports == {'Chapter_12.ch12_r06', 'textwrap',
...     'Chapter_12.ch12_r05', 'pathlib', 'concurrent',
...     'argparse', 'typing'}
True
>>> sorted(all_imports)
['Chapter_12.ch12_r05', 'Chapter_12.ch12_r06', 'argparse', 'concurrent', 'pathlib', 'textwrap', 'typing']


# Subsection: How to do it...
# Topic: Writing a set comprehension

>>> {}
{}

>>> {...
...     for item, import_list in import_details
...         for name in import_list
... }
{Ellipsis}

>>> names = {name
...     for item, import_list in import_details
...         for name in import_list}
>>> names ==  {'Chapter_12.ch12_r06', 'Chapter_12.ch12_r05',
...     'typing', 'concurrent', 'argparse', 'textwrap', 'pathlib'}
True

# Subsection: How to do it...
# Topic: Using the set function on a generator expression

>>> set(name
...     for item, import_list in import_details
...         for name in import_list
... )
... # doctest: +SKIP

>>> all_imports = set(name
...     for item, import_list in import_details
...         for name in import_list
... )

>>> all_imports == {'textwrap', 'Chapter_12.ch12_r05',
...     'Chapter_12.ch12_r06', 'typing', 'pathlib',
...     'concurrent', 'argparse'}
True

>>> sorted(all_imports)
['Chapter_12.ch12_r05', 'Chapter_12.ch12_r06', 'argparse', 'concurrent', 'pathlib', 'textwrap', 'typing']

# Subsection: How it works...

>>> import sys
>>> v1 = 7
>>> v2 = 7+sys.hash_info.modulus
>>> v1
7
>>> v2
2305843009213693958

>>> hash(v1)
7
>>> hash(v2)
7

# Subsection: There's more...

>>> collection = {1}
>>> collection
{1}

>>> item = 3
>>> collection.union({item})
{1, 3}

>>> collection
{1}


>>> collection = collection | {item}
>>> collection
{1, 3}


>>> collection.update({4})
>>> collection
{1, 3, 4}


# End of Building sets -- literals, adding, comprehensions, and operators
